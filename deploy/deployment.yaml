# ----------------------
# OpenTelemetry Collector Deployment
# ----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: default
labels:
  app: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector:latest
        args: ["--config", "/etc/otel/config.yaml"]
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 4318
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 4318
          initialDelaySeconds: 10
          periodSeconds: 30
        volumeMounts:
        - name: otel-config
          mountPath: /etc/otel
      volumes:
      - name: otel-config
        configMap:
          name: otel-collector-config
      restartPolicy: Always

---
# ----------------------
# OTel Collector Service
# ----------------------
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: default
labels:
  app: otel-collector
spec:
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
  - name: otlp-http
    port: 4318
    targetPort: 4318
  selector:
    app: otel-collector

---
# ----------------------
# Sling Sync CronJob
# ----------------------
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sling-sync
spec:
  schedule: "*/5 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            job: sling-sync
        spec:
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          containers:
          - name: sling-sync-wrapper
            image: registry.local/sling-sync-wrapper:latest
            env:
            - name: MISSION_CLUSTER_ID
              value: "mission-01"
            - name: PIPELINE_DIR
              value: "/etc/sling/pipelines"   # directory mount for multi-pipeline support
            - name: SLING_STATE
              value: "greptimedb://greptimedb:4001/sling_state"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "otel-collector:4317"
            - name: SYNC_MODE
              value: "normal"  # can be "normal", "noop", or "backfill"
            - name: SYNC_MAX_RETRIES
              value: "3"
            - name: SYNC_BACKOFF_BASE
              value: "5s"
            volumeMounts:
            - name: sling-pipelines
              mountPath: /etc/sling/pipelines
            resources:
              requests:
                cpu: "50m"
                memory: "64Mi"
              limits:
                cpu: "200m"
                memory: "256Mi"
          volumes:
          - name: sling-pipelines
            configMap:
              name: sling-pipelines-config

---
# ----------------------
# ConfigMap for Pipelines
# ----------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: sling-pipelines-config
data:
  # Example of multiple pipeline configs
  pipeline1.yaml: |
    source:
      type: postgres
      connection: "postgres://user:pass@mission-db:5432/dbname"
      table: drone_telemetry
      incremental_column: ts
    target:
      type: postgres
      connection: "postgres://user:pass@command-db:5432/dbname"
      table: drone_telemetry
    transforms:
      - add_column:
          name: synced_from
          value: "{{ env.MISSION_CLUSTER_ID }}"
      - add_column:
          name: synced_at
          value: "{{ now() }}"
      - add_column:
          name: synced_id
          value: "{{ env.SYNC_JOB_ID }}"
    options:
      on_conflict: skip
  pipeline2.yaml: |
    # Another pipeline example
    source:
      type: postgres
      connection: "postgres://user:pass@other-mission-db:5432/dbname"
      table: drone_telemetry
      incremental_column: ts
    target:
      type: postgres
      connection: "postgres://user:pass@command-db:5432/dbname"
      table: drone_telemetry
    transforms:
      - add_column:
          name: synced_from
          value: "{{ env.MISSION_CLUSTER_ID }}"
      - add_column:
          name: synced_at
          value: "{{ now() }}"
      - add_column:
          name: synced_id
          value: "{{ env.SYNC_JOB_ID }}"
    options:
      on_conflict: skip
